package com.norswap.nanoeth.crypto.curve;

import com.norswap.nanoeth.utils.Randomness;
import java.math.BigInteger;

/**
 * Represent an elliptic curve that can be used for cryptographic purposes.
 * <p>
 * We assume that the curve is defined over a prime field (i.e. {@link #q} is prime).
 */
public abstract class Curve<Point> {

    // =============================================================================================
    // region ACCESSORS
    // =============================================================================================

    /**
     * The order (size) of the finite field on which the curve is defined.
     * <p>
     * This is sometimes denoted as "p" because p is the prime characteristic of a field
     */
    public abstract BigInteger q();

    /** The order (size) of the elliptic curve. This is called #E(Fp) in the X9.62 standard. */
    public abstract BigInteger N();

    /** The order (size) of the cyclic subgroup generated by {@link #G}. This should be a large
     *  prime number. */
    public abstract BigInteger n();

    /** The cofactor {@code H} such that {@code H == N / n}. */
    public abstract BigInteger H();

    /** The generator: a point that generates a cyclic subgroup of the finite field, of order {@link #n}. */
    public abstract Point G();

    /** Returns the 0 point (aka infinity point) for this curve. */
    public abstract Point zero();

    /** The elliptic curve signer associated with this curve if any, otherwise null. */
    public abstract ECSigner signer();

    // endregion
    // =============================================================================================
    // region POINTS
    // =============================================================================================

    /** Returns the x coordinate of a point. */
    public abstract BigInteger getPointX (Point point);

    /** Returns the y coordinate of a point. */
    public abstract BigInteger getPointY (Point point);

    /** Returns the z (projective) coordinate of a point, if the curve supports it. */
    public abstract BigInteger getPointZ (Point point);

    // ---------------------------------------------------------------------------------------------

    /** Returns truee iff the point represents the zero point of the curve (also known as the point
     * at infinity). */
    public abstract boolean isZero (Point point);

    // ---------------------------------------------------------------------------------------------

    /** Returns true iff this is valid point: a point whose coordinate satisfy the curve's equation. */
    public abstract boolean isValid (Point point);

    // ---------------------------------------------------------------------------------------------

    /**
     * Creates a new point with the given x coordinate. If no such point exists, returns null.
     * Otherwise, then there are almost certainly two such points. This method returns one of those
     * (use {@link #point(BigInteger, boolean)} to specify which one you would like.
     */
    public abstract Point pointOrNull (BigInteger x);

    // ---------------------------------------------------------------------------------------------

    /**
     * Creates a new point with the given x coordinate. If such a point exist at all, then there are
     * almost certainly two such points. This method returns one of those (use {@link
     * #point(BigInteger, boolean)} to specify which one you would like.
     *
     * @throws IllegalArgumentException if no such point exists
     */
    public Point point (BigInteger x) {
        var point = pointOrNull(x);
        if (x == null)
            throw new IllegalArgumentException("no point with x coordinate: " + x);
        return point;
    }

    // ---------------------------------------------------------------------------------------------

    /**
     * Creates a new point with the given x coordinate. If such a point exist at all, then there are
     * almost certainly two such points, and the {@code yOdd} argument lets you choose which one you
     * would like returned. If true, it will return the point with odd y (since the finite field
     * on which coordinates are defined is prime, y and -y must have different oddness).
     * <p>
     * This is useful to compress a coordinate (x,y) to just x + 1 bit to indicate the correct
     * y to retrieve.
     *
     * @throws IllegalArgumentException if no such point exists
     */
    public Point point (BigInteger x, boolean yOdd) {
        var point = point(x);
        var y = getPointY(point);
        return y.testBit(0) == yOdd
            ? point
            : point(x, q().subtract(y)); // (x, -y)
    }

    // ---------------------------------------------------------------------------------------------

    /**
     * Returns a point with the given coordinates.
     * <p>
     * It is recommended to use an assertion to validate whether the point {@link #isValid(Object)
     * exists on the curve}, but not to check is in optimized execution, for the sake of efficiency.
     */
    public Point point (BigInteger x, BigInteger y) {
        return point(x, y, BigInteger.ONE);
    }

    // ---------------------------------------------------------------------------------------------

    /**
     * Returns a point with the given projective coordinates, if the curve supports them.
     * <p>
     * It is recommended to use an assertion to validate whether the point {@link #isValid(Object)
     * exists on the curve}, but not to check is in optimized execution, for the sake of efficiency.
     */
    public abstract Point point (BigInteger x, BigInteger y, BigInteger z);

    // ---------------------------------------------------------------------------------------------

    /** Returns a random point that lives on the curve. */
    public Point randomPoint() {
        Point point = null;
        while (point == null) {
            var x = Randomness.randomInteger(q());
            point = pointOrNull(x);
        }
        return point;
    }

    // endregion
    // =============================================================================================
}
